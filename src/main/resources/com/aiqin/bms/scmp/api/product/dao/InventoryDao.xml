<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aiqin.bms.scmp.api.product.dao.InventoryDao">
    <sql id="inventory_list_filter">
        <where>
            <if test="storeId != null and storeId.length()>0">
                pd.distributor_id = #{storeId,jdbcType=VARCHAR}
            </if>
            <if test="storageType != null">
                AND pd.storage_type = #{storageType}
            </if>
            <if test="productTypeId != null and productTypeId.length()>0 ">
                AND pd.category_id = #{productTypeId,jdbcType=VARCHAR}
            </if>
            <if test="minStorage != null">
                AND pd.display_stock - pd.lock_stock >= #{minStorage,jdbcType=INTEGER}
            </if>
            <if test="maxStorage != null">
                AND <![CDATA[ pd.display_stock - pd.lock_stock <= #{maxStorage,jdbcType=INTEGER} ]]>
            </if>
            <if test="warningType == 1">
                -- AND (<![CDATA[ pd.warning_status = 1 AND pd.display_stock - pd.lock_stock > pd.warning_stock ]]>)
                AND
                CASE
                WHEN pd.warning_stock IS NOT NULL THEN
                (<![CDATA[ pd.warning_status = 1 AND pd.display_stock - pd.lock_stock > pd.warning_stock ]]>)
                ELSE
                (<![CDATA[ pd.warning_status = 1 AND pd.display_stock - pd.lock_stock > pd.default_warning_stock ]]>)
                END
            </if>
            <if test="warningType == 2">
                -- AND (<![CDATA[ pd.warning_status = 1 AND pd.display_stock - pd.lock_stock <= pd.warning_stock ]]>)
                AND
                CASE
                WHEN pd.warning_stock IS NOT NULL THEN
                (<![CDATA[ pd.warning_status = 1 AND pd.display_stock - pd.lock_stock <= pd.warning_stock ]]>)
                ELSE
                (<![CDATA[ pd.warning_status = 1 AND pd.display_stock - pd.lock_stock <= pd.default_warning_stock ]]>)
                END
            </if>
            <if test="warningType == 3">
                AND pd.warning_status = 0
            </if>
            <if test="productKey != null">
                AND (pd.bar_code LIKE CONCAT('%', #{productKey,jdbcType=VARCHAR}, '%') OR pd.product_name LIKE
                CONCAT('%', #{productKey,jdbcType=VARCHAR}, '%'))
            </if>
        </where>
    </sql>

    <sql id="inventory_distribution_list_filter">
        WHERE pd.distributor_id = #{storeId,jdbcType=VARCHAR} AND pd.sku_code = #{productSku,jdbcType=VARCHAR}
        <if test="storageType != null">
            AND pd.storage_type = #{storageType,jdbcType=INTEGER}
        </if>
    </sql>

    <sql id="inventory_account_list_filter">
        <where>
            <if test="storeId != null and storeId.length()>0">
                psd.distributor_id = #{storeId,jdbcType=VARCHAR}
            </if>
            <if test="recordType != null">
                AND psd.stock_change_type = #{recordType,jdbcType=INTEGER}
            </if>
            <if test="billType != null">
                AND psd.stock_change_reason = #{billType,jdbcType=INTEGER}
            </if>
            <if test="recordNumber != null and recordNumber.length()>0">
                AND (psd.warehousing_id LIKE CONCAT('%', #{recordNumber,jdbcType=VARCHAR}, '%') OR psd.relation_id LIKE
                CONCAT('%', #{recordNumber,jdbcType=VARCHAR}, '%'))
            </if>
        </where>
    </sql>

    <select id="getInventoryCount" parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryRequest"
            resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM (
        SELECT pd.sku_code FROM product_distributor pd
        <include refid="inventory_list_filter"/>
        GROUP BY pd.distributor_id, pd.sku_code
        ) t
    </select>

    <select id="getInventories" parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryRequest"
            resultType="com.aiqin.bms.scmp.api.product.domain.Inventory">
        SELECT pd.distributor_id storeId, pd.product_id productId, pd.product_code productCode,
        pd.product_name productName, pd.sku_code productSku, pd.category_id productTypeId,
        pd.category_name productTypeName, pd.bar_code productBarcode, pd.logo logo, pd.images images, pd.itro_images
        itroImages,
        SUM(pd.display_stock + pd.return_stock) totalStorage,
        SUM(pd.display_stock - pd.lock_stock) sellableStorage,pd.price productPrice, pd.spec productSpec,
        pd.unit productUnit, GROUP_CONCAT(pd.storage_type) storageType,
        pd.display_stock displayStock,pd.lock_stock lockStock,pd.warning_stock warningStock,pd.default_warning_stock
        defaultWarningStock,
        pd.warning_status warningStatus, ps.color_name colorName,ps.model_number modelNumber
        -- ,
        -- CASE
        -- WHEN pd.warning_status = 0 THEN 3
        -- ELSE CASE WHEN pd.display_stock - pd.lock_stock > pd.warning_stock THEN 1 ELSE 2 END
        -- END warningType
        FROM product_distributor pd left join product_sku ps on ps.sku_code=pd.sku_code
        <include refid="inventory_list_filter"/>
        GROUP BY pd.distributor_id, pd.product_id, pd.product_code, pd.product_name, pd.category_id, pd.category_name,
        pd.logo, pd.images, pd.itro_images,
        pd.bar_code,
        pd.sku_code, pd.price, pd.spec, pd.unit, pd.storage_type
        -- ,
        -- CASE
        -- WHEN pd.warning_status = 0 THEN 3
        -- ELSE CASE WHEN pd.display_stock - pd.lock_stock > pd.warning_stock THEN 1 ELSE 2 END
        -- END
        <if test="sellableStorageSort ==1">
            ORDER BY sellableStorage asc
        </if>
        <if test="sellableStorageSort ==2">
            ORDER BY sellableStorage DESC
        </if>
        LIMIT #{beginIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
    </select>

    <select id="getInventoryDistributionCount"
            parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryDistributionRequest"
            resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM (
        SELECT pd.sku_code FROM product_distributor pd
        <include refid="inventory_distribution_list_filter"/>
        ) t
    </select>

    <select id="getInventoryDistributions"
            parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryDistributionRequest"
            resultType="com.aiqin.bms.scmp.api.product.domain.InventoryDistribution">
        SELECT pd.storage_type storageType, pd.display_stock + pd.return_stock totalStorage,
        pd.display_stock - pd.lock_stock sellableStorage, pd.lock_stock lockStorage,
        pd.return_stock returnStorage
        FROM product_distributor pd
        <include refid="inventory_distribution_list_filter"/>
        LIMIT #{beginIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
    </select>

    <update id="updateInventoryWarning"
            parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryWarningRequest">
        UPDATE product_distributor pd
        <set>
            <if test="warnable != null">
                pd.warning_status = #{warnable,jdbcType=INTEGER},
            </if>
            <if test="threshold != null">
                pd.warning_stock = #{threshold,jdbcType=INTEGER},
            </if>
            <if test="defaultWarningStock != null">
                pd.default_warning_stock = #{defaultWarningStock,jdbcType=INTEGER},
            </if>
        </set>
        WHERE pd.distributor_id = #{storeId,jdbcType=VARCHAR}
        <if test="skus !=null and skus.size()>0">
            AND pd.sku_code IN
            <foreach collection="skus" item="sku" open="(" separator="," close=")">
                #{sku,jdbcType=VARCHAR}
            </foreach>
        </if>
    </update>

    <select id="getInventoryAccountCount"
            parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryAccountRequest"
            resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM (
        SELECT psd.warehousing_id FROM product_stock_detail psd
        <include refid="inventory_account_list_filter"/>
        GROUP BY psd.warehousing_id, psd.relation_id, psd.stock_change_reason, psd.warehouse_type,
        psd.position,psd.create_time, psd.create_by
        ) t
    </select>

    <select id="getInventoryAccounts" parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryAccountRequest"
            resultType="com.aiqin.bms.scmp.api.product.domain.InventoryAccount">
        SELECT IFNULL(psd.warehousing_id,'-') masterNumber, psd.relation_id relateNumber, psd.stock_change_reason
        billType,
        psd.warehouse_type storageType, psd.position storagePosition, psd.create_time createTime, psd.create_by
        creator,psd.create_by_name createByName
        FROM product_stock_detail psd
        <include refid="inventory_account_list_filter"/>
        GROUP BY psd.warehousing_id, psd.relation_id, psd.stock_change_reason, psd.warehouse_type,
        psd.position,psd.create_time, psd.create_by order by psd.id desc
        LIMIT #{beginIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
    </select>

    <select id="getInventoryAccountDetails" parameterType="java.lang.String"
            resultType="com.aiqin.bms.scmp.api.product.domain.InventoryAccount">
        SELECT psd.warehousing_id masterNumber, psd.relation_id relateNumber, psd.stock_change_reason billType,
              psd.warehouse_type storageType, psd.position storagePosition, psd.create_time createTime, psd.create_by creator,
              psd.change_count updateVolume, psd.sellable_storage sellableStorage, pd.product_name productName,psd.create_by_name createByName,
              pd.bar_code productBarcode, pd.price productPrice
        FROM product_stock_detail psd
        INNER JOIN product_distributor pd ON pd.sku_code = psd.sku_code
        WHERE psd.warehousing_id = #{masterNumber,jdbcType=VARCHAR}
    </select>
    <select id="getSelectByCodeAndId" resultType="com.aiqin.bms.scmp.api.product.domain.ProductDistributor">
           select  display_stock displayStock
           from  product_distributor
           where distributor_id=#{distributorId} and product_code=#{productCode} and del_flag=0
    </select>
    <select id="getByidslu" resultType="com.aiqin.bms.scmp.api.product.domain.ProductDistributor">
        select sku_code skuCode,distributor_id distributorId,storage_type storageType, display_stock displayStock
        ,return_stock returnStock,storage_stock storageStock
        from product_distributor
        where distributor_id=#{distributorId} and del_flag=0
        and sku_code in
        <foreach collection="skuCode" item="sku" open="(" separator="," close=")">
            #{sku}
        </foreach>
    </select>
    <select id="getPtDiReVo"
            resultType="com.aiqin.bms.scmp.api.product.domain.response.inbound.ProductDistributorReVo">
        select spu_code spuCode,sku_code skuCode,distributor_id distributorId,distributor_code
        distributorCode,distributor_name distributorName,storage_type storageType,
        display_stock displayStock, return_stock returnStock,storage_stock storageStock,bar_code barCode,product_id
        productId,product_code productCode,product_name productName,
        category_id categoryId,category_name categoryName,spec ,color_code colorCode,color_name colorName,model_number
        modelNumber,unit_code unitCode,unit ,show_name showName,
        logo,images
        from product_distributor where
        distributor_id=#{storeId} and del_flag=0

        <if test="productKey!= null">
            and (bar_code=#{productKey} or product_name like CONCAT('%', #{productKey}, '%'))
        </if>
        <if test="productTypeId!=null">
            and category_id =#{productTypeId}
        </if>
    </select>
    <select id="getPtDiReVoPageCount" resultType="java.lang.Integer">
        select count(*)
        from product_distributor where
        distributor_id=#{storeId} and del_flag=0

        <if test="productKey!= null">
            and (bar_code=#{productKey} or product_name like CONCAT('%', #{productKey}, '%'))
        </if>
        <if test="productTypeId!=null">
            and category_id =#{productTypeId}
        </if>
        <if test="dorrStock==1">
            and display_stock!=0
        </if>
        <if test="dorrStock==2">
            and return_stock!=0
        </if>
        <if test="dorrStock==3">
            and storage_stock !=0
        </if>
        <if test="storageType!=null">
            and storage_type=#{storageType}
        </if>
    </select>
    <select id="getPtDiReVoPage"
            resultType="com.aiqin.bms.scmp.api.product.domain.response.inbound.ProductDistributorReVoPage">
        select spu_code spuCode,sku_code skuCode,distributor_id distributorId,distributor_code
        distributorCode,distributor_name distributorName,storage_type storageType,
        <if test="dorrStock==1">
            display_stock
        </if>
        <if test="dorrStock==2">
            return_stock
        </if>
        <if test="dorrStock==3">
            storage_stock
        </if>
        stock, storage_stock storageStock,bar_code barCode,product_id productId,product_code productCode,product_name
        productName,
        category_id categoryId,category_name categoryName,spec ,color_code colorCode,color_name colorName,model_number
        modelNumber,unit_code unitCode,unit ,show_name showName,
        logo,images
        from product_distributor where
        distributor_id=#{storeId} and del_flag=0

        <if test="productKey!= null">
            and (bar_code=#{productKey} or product_name like CONCAT('%', #{productKey}, '%'))
        </if>
        <if test="productTypeId!=null">
            and category_id =#{productTypeId}
        </if>
        <if test="dorrStock==1">
            and display_stock!=0
        </if>
        <if test="dorrStock==2">
            and return_stock!=0
        </if>
        <if test="dorrStock==3">
            and storage_stock !=0
        </if>
        <if test="storageType!=null">
            and storage_type=#{storageType}
        </if>
        LIMIT #{beginIndex,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}

    </select>

    <update id="updateInventoryNumber" parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryRecordRequest">
        UPDATE product_distributor pd
        <set>
            <if test="recordType == 0">
                <if test="storagePosition == 1">
                    pd.display_stock = pd.display_stock + #{recordNumber,jdbcType=INTEGER}
                </if>
                <if test="storagePosition == 2">
                    pd.return_stock = pd.return_stock + #{recordNumber,jdbcType=INTEGER}
                </if>
            </if>
            <if test="recordType == 1">
                <if test="releaseStatus == 0">
                    pd.lock_stock = pd.lock_stock + #{recordNumber,jdbcType=INTEGER}
                </if>
                <if test="releaseStatus == 1">
                    pd.display_stock = pd.display_stock - #{recordNumber,jdbcType=INTEGER},
                    pd.lock_stock = pd.lock_stock - #{recordNumber,jdbcType=INTEGER}
                </if>
            </if>
            , pd.update_by = #{operator,jdbcType=VARCHAR}, pd.update_time = NOW()
        </set>
        WHERE pd.distributor_id =#{storeId,jdbcType=VARCHAR} AND pd.sku_code = #{productSku,jdbcType=VARCHAR}
    </update>
    <update id="updateByCodeAndId">
        update  product_distributor
        set  display_stock= #{displayStock}+display_stock ,update_time=#{updateTime},update_by=#{updateBy}
        where
         distributor_id=#{distributorId} and product_code=#{productCode} and del_flag=0
    </update>

    <insert id="insertInventoryRecord" parameterType="com.aiqin.bms.scmp.api.product.domain.request.InventoryRecordRequest">
        INSERT INTO product_stock_detail (sku_code, distributor_id, distributor_code, stock_change_type, change_count,
            sellable_storage, stock_change_reason, release_status, warehousing_id, relation_id, warehouse_type, `position`,
            create_time, update_time, create_by, update_by,create_by_name)
            VALUES (#{productSku,jdbcType=VARCHAR}, #{storeId,jdbcType=VARCHAR}, #{storeCode,jdbcType=VARCHAR},
              #{recordType,jdbcType=INTEGER}, #{recordNumber,jdbcType=INTEGER}, #{sellableStorage,jdbcType=INTEGER},
              #{billType,jdbcType=INTEGER}, #{releaseStatus,jdbcType=INTEGER}, #{masterNumber,jdbcType=VARCHAR},
              #{relateNumber,jdbcType=VARCHAR}, #{storageType,jdbcType=INTEGER}, #{storagePosition,jdbcType=INTEGER},
              NOW(), NOW(), #{operator,jdbcType=VARCHAR}, #{operator,jdbcType=VARCHAR},#{createByName})
    </insert>
    <insert id="addProductDistributor">
        INSERT INTO product_distributor
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="spuCode!=null">spu_code,</if>
            <if test="skuCode!=null">sku_code,</if>
            <if test="distributorId!=null">distributor_id,</if>
            <if test="distributorCode!=null">distributor_code,</if>
            <if test="distributorName!=null">distributor_name,</if>
            <if test="storageType!=null">storage_type,</if>
            <if test="displayStock!=null">display_stock,</if>
            <if test="returnStock!=null">return_stock,</if>
            <if test="storageStock!=null">storage_stock,</if>
            <if test="lockStock!=null">lock_stock,</if>
            <if test="warningStock!=null">warning_stock,</if>
            <if test="defaultWarningStock!=null">default_warning_stock,</if>
            <if test="warningStatus!=null">warning_status,</if>
            <if test="freight!=null">freight,</if>
            <if test="barCode!=null">bar_code,</if>
            <if test="productId!=null">product_id,</if>
            <if test="categoryId!=null">category_id,</if>
            <if test="categoryName!=null">category_name,</if>
            <if test="productCode!=null">product_code,</if>
            <if test="productName!=null">product_name,</if>
            <if test="spec!=null">spec,</if>
            <if test="unit!=null">unit,</if>
            <if test="showName!=null">show_name,</if>
            <if test="price!=null">price,</if>
            <if test="images!=null">images,</if>
            <if test="itroImages!=null">itro_images,</if>
            <if test="keyword!=null">keyword,</if>
            <if test="onSale!=null">on_sale,</if>
            <if test="distributionChannel!=null">distribution_channel,</if>
            <if test="brandId!=null">brand_id,</if>
            <if test="brandName!=null">brand_name,</if>
            <if test="saleTime!=null">sale_time,</if>
            <if test="createTime!=null">create_time,</if>
            <if test="updateTime!=null">update_time,</if>
            <if test="createBy!=null">create_by,</if>
            <if test="updateBy!=null">update_by,</if>
            <if test="delFlag!=null">del_flag,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="spuCode!=null">#{spuCode},</if>
            <if test="skuCode!=null">#{skuCode},</if>
            <if test="distributorId!=null">#{distributorId},</if>
            <if test="distributorCode!=null">#{distributorCode},</if>
            <if test="distributorName!=null">#{distributorName},</if>
            <if test="storageType!=null">#{storageType},</if>
            <if test="displayStock!=null">#{displayStock},</if>
            <if test="returnStock!=null">#{returnStock},</if>
            <if test="storageStock!=null">#{storageStock},</if>
            <if test="lockStock!=null">#{lockStock},</if>
            <if test="warningStock!=null">#{warningStock},</if>
            <if test="defaultWarningStock!=null">#{defaultWarningStock},</if>
            <if test="warningStatus!=null">#{warningStatus},</if>
            <if test="freight!=null">#{freight},</if>
            <if test="barCode!=null">#{barCode},</if>
            <if test="productId!=null">#{productId},</if>
            <if test="categoryId!=null">#{categoryId},</if>
            <if test="categoryName!=null">#{categoryName},</if>
            <if test="productCode!=null">#{productCode},</if>
            <if test="productName!=null">#{productName},</if>
            <if test="spec!=null">#{spec},</if>
            <if test="unit!=null">#{unit},</if>
            <if test="showName!=null">#{showName},</if>
            <if test="price!=null">#{price},</if>
            <if test="images!=null">#{images},</if>
            <if test="itroImages!=null">#{itroImages},</if>
            <if test="keyword!=null">#{keyword},</if>
            <if test="onSale!=null">#{onSale},</if>
            <if test="distributionChannel!=null">#{distributionChannel},</if>
            <if test="brandId!=null">#{brandId},</if>
            <if test="brandName!=null">#{brandName},</if>
            <if test="saleTime!=null">#{saleTime},</if>
            <if test="createTime!=null">#{createTime},</if>
            <if test="updateTime!=null">#{updateTime},</if>
            <if test="createBy!=null">#{createBy},</if>
            <if test="updateBy!=null">#{updateBy},</if>
            <if test="delFlag!=null">#{delFlag},</if>
        </trim>

    </insert>
    <insert id="insertInventoryRecordList">
        INSERT INTO product_stock_detail (sku_code, distributor_id, distributor_code, stock_change_type, change_count,
        sellable_storage, stock_change_reason, release_status, warehousing_id, relation_id, warehouse_type, `position`,
        create_time, update_time, create_by, update_by,create_by_name)
        VALUES
        <foreach collection="list" item="vo" separator=",">
            (#{vo.productSku}, #{vo.storeId}, #{vo.storeCode},
            #{vo.recordType}, #{vo.recordNumber}, #{vo.sellableStorage},
            #{vo.billType}, #{vo.releaseStatus}, #{vo.masterNumber},
            #{vo.relateNumber}, #{vo.storageType}, #{vo.storagePosition},
            NOW(), NOW(), #{vo.operator}, #{vo.operator},#{vo.createByName})
        </foreach>
    </insert>

    <select id="queryProductDistributorOrder" resultType="com.aiqin.bms.scmp.api.product.domain.ProductDistributorOrder"
            parameterType="com.aiqin.bms.scmp.api.product.domain.request.ProductDistributorOrderRequest">
        select sku_code as skuCode,distributor_id as distributorId,display_stock as displayStock,return_stock as
        returnStock,storage_stock as storageStock,lock_stock as lockStock,product_name as productName,logo
        from product_distributor
        where 1=1
        <if test="distributorId!=null">
            and distributor_id = #{distributorId}
        </if>
        <if test="skuCodes!=null">
            and sku_code in (
            <foreach collection="skuCodes" item="item" separator=",">
                #{item,jdbcType=VARCHAR}
            </foreach>
            )
        </if>
        AND
        CASE
        WHEN warning_stock IS NOT NULL THEN
        (<![CDATA[ warning_status = 1 AND display_stock - lock_stock <= warning_stock ]]>)
        ELSE
        (<![CDATA[ warning_status = 1 AND display_stock - lock_stock <= default_warning_stock ]]>)
        END
    </select>
</mapper>