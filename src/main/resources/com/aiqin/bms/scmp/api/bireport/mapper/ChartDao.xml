<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aiqin.bms.scmp.api.bireport.dao.ChartDao">


    <sql id="select_monthly_sales">
        <where>
            1=1
          <!--  <if test="beginCreateTime!=null and beginCreateTime!=''">
                and bms.year_month between #{beginCreateTime}
            </if>
            <if test="createTime!=null and createTime!=''">
                and #{createTime}
            </if>-->
            <if test="createTime!=null and createTime!=''">
                and substring(bms.year_month,1,4)=#{createTime}
            </if>
            <if test="productSortCode!=null and productSortCode!=''">
                and bms.product_sort_code like concat('%', #{productSortCode}, '%')
            </if>
            <if test="productSortName!=null and productSortName!=''">
                and bms.product_sort_name like concat('%', #{productSortName}, '%')
            </if>
            <if test="orderCode!=null and orderCode!=''">
                and bms.price_channel_code like concat('%', #{orderCode}, '%')
            </if>
            <if test="orderOriginal!=null and orderOriginal!=''">
                and bms.price_channel_name like concat('%', #{orderOriginal}, '%')
            </if>
            <if test="storeTypeCode!=null and storeTypeCode!=''">
                and bms.store_type_code like concat('%', #{storeTypeCode}, '%')
            </if>
            <if test="storeType!=null and storeType!=''">
                and bms.store_type like concat('%', #{storeType}, '%')
            </if>
            <if test="dataTypeCode!=null and dataTypeCode!=''">
                and bms.data_type_code like concat('%', #{dataTypeCode}, '%')
            </if>
            <if test="dataType!=null and dataType!=''">
                and bms.data_type like concat('%', #{dataType}, '%')
            </if>
        </where>
    </sql>
    <sql id="select_monthly_gross_margin">
        <where>
            1=1
          <!--  <if test="beginCreateTime!=null and beginCreateTime!=''">
                and bmgm.year_month between #{beginCreateTime}
            </if>
            <if test="createTime!=null and createTime!=''">
                and #{createTime}
            </if>-->
            <if test="createTime!=null and createTime!=''">
                and substring(bmgm.year_month,1,4)=#{createTime}
            </if>
            <if test="productSortCode!=null and productSortCode!=''">
                and bmgm.product_sort_code like concat('%', #{productSortCode}, '%')
            </if>
            <if test="productSortName!=null and productSortName!=''">
                and bmgm.product_sort_name like concat('%', #{productSortName}, '%')
            </if>
            <if test="orderCode!=null and orderCode!=''">
                and bmgm.price_channel_code like concat('%', #{orderCode}, '%')
            </if>
            <if test="orderOriginal!=null and orderOriginal!=''">
                and bmgm.price_channel_name like concat('%', #{orderOriginal}, '%')
            </if>
            <if test="storeTypeCode!=null and storeTypeCode!=''">
                and bmgm.store_type_code like concat('%', #{storeTypeCode}, '%')
            </if>
            <if test="storeType!=null and storeType!=''">
                and bmgm.store_type like concat('%', #{storeType}, '%')
            </if>
            <if test="dataTypeCode!=null and dataTypeCode!=''">
                and bmgm.data_type_code like concat('%', #{dataTypeCode}, '%')
            </if>
            <if test="dataType!=null and dataType!=''">
                and bmgm.data_type like concat('%', #{dataType}, '%')
            </if>

        </where>
    </sql>
    <sql id="select_month_sales_achievement">
        <where>
            1=1
         <!--   <if test="beginCreateTime!=null and beginCreateTime!=''">
                and bmsa.stat_year between #{beginCreateTime}
            </if>
            <if test="createTime!=null and createTime!=''">
                and #{createTime}
            </if>-->
            <if test="createTime!=null and createTime!=''">
                and bmsa.stat_year=#{createTime}
            </if>
            <if test="productSortCode!=null and productSortCode!=''">
                and bmsa.product_sort_code like concat('%', #{productSortCode}, '%')
            </if>
            <if test="productSortName!=null and productSortName!=''">
                and bmsa.product_sort_name like concat('%', #{productSortName}, '%')
            </if>
            <if test="orderCode!=null and orderCode!=''">
                and bmsa.price_channel_code like concat('%', #{orderCode}, '%')
            </if>
            <if test="orderOriginal!=null and orderOriginal!=''">
                and bmsa.price_channel_name like concat('%', #{orderOriginal}, '%')
            </if>
            <if test="storeTypeCode!=null and storeTypeCode!=''">
                and bmsa.store_type_code like concat('%', #{storeTypeCode}, '%')
            </if>
            <if test="storeType!=null and storeType!=''">
                and bmsa.store_type like concat('%', #{storeType}, '%')
            </if>
            <if test="dataTypeCode!=null and dataTypeCode!=''">
                and bmsa.data_type_code like concat('%', #{dataTypeCode}, '%')
            </if>
            <if test="dataType!=null and dataType!=''">
                and bmsa.data_type like concat('%', #{dataType}, '%')
            </if>

        </where>
    </sql>
    <sql id="select_month_cumulative_brand_sales">
        <where>
            1=1
           <!-- <if test="beginCreateTime!=null and beginCreateTime!=''">
                and bmcbs.year_month between #{beginCreateTime}
            </if>
            <if test="createTime!=null and createTime!=''">
                and #{createTime}
            </if>-->
            <if test="createTime!=null and createTime!=''">
                and bmcbs.year_month = #{createTime}
            </if>
            <if test="productSortCode!=null and productSortCode!=''">
                and bmcbs.product_sort_code like concat('%', #{productSortCode}, '%')
            </if>
            <if test="productSortName!=null and productSortName!=''">
                and bmcbs.product_sort_name like concat('%', #{productSortName}, '%')
            </if>
            <if test="orderCode!=null and orderCode!=''">
                and bmcbs.price_channel_code like concat('%', #{orderCode}, '%')
            </if>
            <if test="orderOriginal!=null and orderOriginal!=''">
                and bmcbs.price_channel_name like concat('%', #{orderOriginal}, '%')
            </if>
            <if test="storeTypeCode!=null and storeTypeCode!=''">
                and bmcbs.store_type_code like concat('%', #{storeTypeCode}, '%')
            </if>
            <if test="storeType!=null and storeType!=''">
                and bmcbs.store_type like concat('%', #{storeType}, '%')
            </if>
            <if test="dataTypeCode!=null and dataTypeCode!=''">
                and bmcbs.data_type_code like concat('%', #{dataTypeCode}, '%')
            </if>
            <if test="dataType!=null and dataType!=''">
                and bmcbs.data_type like concat('%', #{dataType}, '%')
            </if>

        </where>
    </sql>
    <sql id="select_month_cumulative_gross_profit_margin">
        <where>
            1=1
            <!--<if test="beginCreateTime!=null and beginCreateTime!=''">
                and bmcgpm.year_month between #{beginCreateTime}
            </if>
            <if test="createTime!=null and createTime!=''">
                and #{createTime}
            </if>-->
            <if test="createTime!=null and createTime!=''">
                and bmcgpm.year_month = #{createTime}
            </if>
            <if test="productSortCode!=null and productSortCode!=''">
                and bmcgpm.product_sort_code like concat('%', #{productSortCode}, '%')
            </if>
            <if test="productSortName!=null and productSortName!=''">
                and bmcgpm.product_sort_name like concat('%', #{productSortName}, '%')
            </if>
            <if test="orderCode!=null and orderCode!=''">
                and bmcgpm.price_channel_code like concat('%', #{orderCode}, '%')
            </if>
            <if test="orderOriginal!=null and orderOriginal!=''">
                and bmcgpm.price_channel_name like concat('%', #{orderOriginal}, '%')
            </if>
            <if test="storeTypeCode!=null and storeTypeCode!=''">
                and bmcgpm.store_type_code like concat('%', #{storeTypeCode}, '%')
            </if>
            <if test="storeType!=null and storeType!=''">
                and bmcgpm.store_type like concat('%', #{storeType}, '%')
            </if>
            <if test="dataTypeCode!=null and dataTypeCode!=''">
                and bmcgpm.data_type_code like concat('%', #{dataTypeCode}, '%')
            </if>
            <if test="dataType!=null and dataType!=''">
                and bmcgpm.data_type like concat('%', #{dataType}, '%')
            </if>

        </where>
    </sql>

    <select id="selectMonthlySales" parameterType="com.aiqin.bms.scmp.api.bireport.domain.request.ChartReqVo"
            resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthlySalesRespVo">
        select
        bms.id as id,
        date_format(bms.create_time, '%Y-%m-%d %H:%i:%s') as createTime,
        bms.year_month as yearMonth,
        bms.product_sort_code as productSortCode,
        bms.product_sort_name as productSortName,
        bms.price_channel_code as orderCode,
        bms.price_channel_name as orderOriginal,
        bms.store_type_code as storeTypeCode,
        bms.store_type as storeType,
        bms.data_type_code as dataTypeCode,
        bms.data_type as dataType,
        sum(bms.channel_order_amount) as channelOrderAmount,
        sum(bms.channel_last_year_sales) as channelLastYearSales,
        sum(bms.channel_last_month_sales) as channelLastMonthSales,
        (sum(bms.channel_order_amount)/sum(bms.channel_last_year_sales))-1 as channelComparedSame,
        (sum(bms.channel_order_amount)/sum(bms.channel_last_month_sales))-1 as channelSequential,
        sum(bms.distribution_order_amount) as distributionOrderAmount,
        sum(bms.distribution_last_year_sales) as distributionLastYearSales,
        sum(bms.distribution_last_month_sales) as distributionLastMonthSales,
        (sum(bms.distribution_order_amount)/sum(bms.distribution_last_year_sales))-1 as distributionComparedSame,
        (sum(bms.distribution_order_amount)/sum(bms.distribution_last_month_sales))-1 as distributionSequential
        from (select * from bi_chart_monthly_sales bms where 1=1
        <if test="createTime!=null and createTime!=''">
            and substring(bms.year_month,1,4)=#{createTime}
        </if>
        order by id desc limit 10000) as bms
        <include refid="select_monthly_sales"/>
        group by substring(bms.year_month,6,2)
        <if test="productSortCode==null and productSortCode==''">
            ,bms.product_sort_code
        </if>
        <if test="orderCode==null and orderCode==''">
            ,bms.price_channel_code
        </if>
        <if test="storeTypeCode==null and storeTypeCode==''">
            ,bms.store_type_code
        </if>
    </select>
    <select id="selectMonthlyGrossMargin" parameterType="com.aiqin.bms.scmp.api.bireport.domain.request.ChartReqVo"
            resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthlyGrossMarginRespVo">
        select
        bmgm.id as id,
        date_format(bmgm.create_time, '%Y-%m-%d %H:%i:%s') as createTime,
        bmgm.year_month as yearMonth,
        bmgm.product_sort_code as productSortCode,
        bmgm.product_sort_name as productSortName,
        bmgm.price_channel_code as orderCode,
        bmgm.price_channel_name as orderOriginal,
        bmgm.store_type_code as storeTypeCode,
        bmgm.store_type as storeType,
        bmgm.data_type_code as dataTypeCode,
        bmgm.data_type as dataType,
        sum(bmgm.sales_cost) as salesCost,
        sum(bmgm.channel_amount) as channelAmount,
        sum(bmgm.channel_amount)-sum(bmgm.sales_cost) as channelMaori,
        (sum(channel_amount)-sum(sales_cost))/sum(channel_amount) as channelMaoriRate,
        (sum(last_year_channel_amount_daily)-sum(last_year_stock_cost))/sum(last_year_channel_amount_daily) as channelLastYearMaoriRate,
        (sum(channel_amount)/sum(last_year_channel_amount_daily))-1 as channelComparedSame,
        (sum(channel_amount)/sum(last_month_channel_amount_daily))-1 as channelSequential,
        sum(bmgm.distribution_amount_daily) as distributionAmount,
        sum(bmgm.distribution_amount_daily)-sum(channel_amount) as distributionMaori,
        (sum(distribution_amount_daily)-channel_amount)/sum(distribution_amount_daily) as distributionMaoriRate,
        (sum(last_year_distribution_amount_daily)-last_year_channel_amount_daily)/sum(last_year_distribution_amount_daily) as distributionLastYearMaoriRate,
        (sum(distribution_amount_daily)/last_year_distribution_amount_daily)-1 as distributionComparedSame,
        (sum(distribution_amount_daily)/last_month_distribution_amount_daily)-1 as distributionSequential
        from (select * from bi_chart_month_gross_margin bmgm where 1=1
        <if test="createTime!=null and createTime!=''">
            and substring(bmgm.year_month,1,4)=#{createTime}
        </if>
        order by id desc limit 10000) as bmgm
        <include refid="select_monthly_gross_margin"/>
        group by substring(bmgm.year_month,6,2)
        <if test="productSortCode==null and productSortCode==''">
            ,bmgm.product_sort_code
        </if>
        <if test="orderCode==null and orderCode==''">
            ,bmgm.price_channel_code
        </if>
        <if test="storeTypeCode==null and storeTypeCode==''">
            ,bmgm.store_type_code
        </if>
    </select>
    <select id="selectMonthSalesAchievement" parameterType="com.aiqin.bms.scmp.api.bireport.domain.request.ChartReqVo"
            resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthSalesAchievementRespVo">
        select
        bmsa.id as id,
        date_format(bmsa.create_time, '%Y-%m-%d %H:%i:%s') as createTime,
        bmsa.stat_year as statYear,
        bmsa.stat_month as statMonth,
        bmsa.product_sort_code as productSortCode,
        bmsa.product_sort_name as productSortName,
        bmsa.price_channel_code as orderCode,
        bmsa.price_channel_name as orderOriginal,
        bmsa.store_type_code as storeTypeCode,
        bmsa.store_type as storeType,
        bmsa.data_type_code as dataTypeCode,
        bmsa.data_type as dataType,
        bmsa.category_code as categoryCode,
        bmsa.category_name as categoryName,
        sum(bmsa.channel_amount) as channelAmount,
        sum(bmsa.channel_budget) as channelBudget,
        sum(bmsa.channel_amount)/sum(bmsa.channel_budget)/100 as channelYieldRate,
        sum(bmsa.distribution_amount) as distributionAmount,
        sum(bmsa.distribution_budget) as distributionBudget,
        sum(bmsa.distribution_amount)/sum(bmsa.distribution_budget)/100 as distributionYieldRate
        from (select * from bi_chart_month_sales_achievement bmsa where 1=1
        <if test="createTime!=null and createTime!=''">
            and bmsa.stat_year=#{createTime}
        </if>
        order by id desc limit 10000) as bmsa
        <include refid="select_month_sales_achievement"/>
        group by stat_month
        <if test="productSortCode==null and productSortCode==''">
            ,bmsa.product_sort_code
        </if>
        <if test="orderCode==null and orderCode==''">
            ,bmsa.price_channel_code
        </if>
        <if test="storeTypeCode==null and storeTypeCode==''">
            ,bmsa.store_type_code
        </if>
    </select>
    <select id="sumMonthSalesAchievement" resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthSalesAchievementRespVo">
        SELECT
        bmsa.id as id,
        SUM(bmsa.channel_amount) as channelAmount,
        SUM(bmsa.channel_budget) as channelBudget,
        SUM(bmsa.channel_amount)/SUM(bmsa.channel_budget) as channelYieldRate,
        SUM(bmsa.distribution_amount) as distributionAmount,
        SUM(bmsa.distribution_budget) as distributionBudget,
        SUM(bmsa.distribution_amount)/SUM(bmsa.distribution_budget) as distributionYieldRate
        from (select * from bi_chart_month_sales_achievement bmsa where 1=1
        <if test="createTime!=null and createTime!=''">
            and bmsa.stat_year=#{createTime}
        </if>
        order by id desc limit 10000) as bmsa
        <include refid="select_month_sales_achievement"/>
    </select>
    <select id="selectMonthCumulativeBrandSales" parameterType="com.aiqin.bms.scmp.api.bireport.domain.request.ChartReqVo"
            resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthCumulativeBrandSalesRespVo">
        select
        bmcbs.id as id,
        date_format(bmcbs.create_time, '%Y-%m-%d %H:%i:%s') as createTime,
        bmcbs.year_month as yearMonth,
        bmcbs.product_sort_code as productSortCode,
        bmcbs.product_sort_name as productSortName,
        bmcbs.price_channel_code as priceChannelCode,
        bmcbs.price_channel_name as priceChannelName,
        bmcbs.store_type_code as storeTypeCode,
        bmcbs.store_type as storeType,
        bmcbs.data_type_code as dataTypeCode,
        bmcbs.data_type as dataType,
        bmcbs.category_code as categoryCode,
        bmcbs.category_name as categoryName,
        sum(bmcbs.total_stock_cost) as totalStockCost,
        sum(bmcbs.total_channel_amount_daily) as totalChannelAmountDaily,
        sum(bmcbs.total_last_year_channel_amount_daily) as totalLastYearChannelAmountDaily,
        sum(bmcbs.total_last_month_channel_amount_daily) as totalLastMonthChannelAmountDaily,
        sum(bmcbs.total_channel_amount_daily)/sum(bmcbs.total_last_year_channel_amount_daily) as totalChannelAmountDailyComparedSame,
        sum(bmcbs.total_channel_amount_daily)/sum(bmcbs.total_last_month_channel_amount_daily) as totalChannelAmountDailySequential,
        sum(bmcbs.total_channel_maori) as totalChannelMaori,
        sum(bmcbs.total_channel_maori)/sum(bmcbs.total_channel_amount_daily) as totalChannelMaoriRate,
        sum(bmcbs.last_year_total_channel_maori)/sum(bmcbs.total_last_year_channel_amount_daily) as totalLastYearChannelMaoriRate,
        sum(last_month_total_channel_maori)/sum(bmcbs.total_last_month_channel_amount_daily) as totalLastMonthChannelMaoriRate,
        sum(bmcbs.total_channel_maori)/sum(bmcbs.last_year_total_channel_maori) as totalChannelGrossMarginComparedSame,
        sum(bmcbs.total_channel_maori)/sum(bmcbs.last_month_total_channel_maori) as totalChannelGrossMarginRateSequential,
        sum(bmcbs.total_distribution_amount_daily) as totalDistributionAmountDaily,
        sum(bmcbs.total_last_year_distribution_amount_daily) as totalLastYearDistributionAmountDaily,
        sum(bmcbs.total_last_month_distribution_amount_daily) as totalLastMonthDistributionAmountDaily,
        sum(bmcbs.total_distribution_amount_daily)/sum(bmcbs.total_last_year_distribution_amount_daily) as totalDistributionAmountDailyComparedSame,
        sum(bmcbs.total_distribution_amount_daily)/sum(bmcbs.total_last_month_distribution_amount_daily) as totalDistributionAmountDailySequential,
        sum(bmcbs.total_distribution_amount) as totalDistributionAmount,
        sum(bmcbs.total_distribution_amount)/sum(bmcbs.total_distribution_amount_daily) as totalDistributionMaoriRate,
        sum(bmcbs.total_last_year_distribution_amount_daily)-sum(bmcbs.total_last_year_channel_amount_daily) as totalLastYearDistributionMaoriRate,
        sum(bmcbs.total_last_month_distribution_amount_daily)-sum(bmcbs.total_last_month_channel_amount_daily) as totalLastMonthDistributionMaoriRate,
        sum(bmcbs.total_distribution_amount)/(sum(bmcbs.total_last_month_distribution_amount_daily)-sum(bmcbs.total_last_month_channel_amount_daily)) as totalDistributionMarginRateSequential,
        sum(bmcbs.total_distribution_amount)/(sum(bmcbs.total_last_year_distribution_amount_daily)-sum(bmcbs.total_last_year_channel_amount_daily)) as totalDistributionGrossMarginComparedSame
        from (select * from bi_month_cumulative_brand_sales bmcbs where 1=1
        <!--<if test="beginCreateTime!=null and beginCreateTime!=''">
            and bmcbs.year_month between #{beginCreateTime}
        </if>
        <if test="createTime!=null and createTime!=''">
            and #{createTime}
        </if>-->
        <if test="createTime!=null and createTime!=''">
            and bmcbs.year_month = #{createTime}
        </if>
        order by id desc limit 10000) as bmcbs
        <include refid="select_month_cumulative_brand_sales"/>
        and product_sort_code is not null and price_channel_code is not null and store_type_code is not null and data_type_code is not null and category_code is not null
        group by product_sort_code,price_channel_code,store_type_code,data_type_code,category_code
    </select>
    <select id="selectMonthCumulativeGrossProfitMargin" parameterType="com.aiqin.bms.scmp.api.bireport.domain.request.ChartReqVo"
            resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthCumulativeGrossProfitMarginRespVo">
        select
        bmcgpm.id as id,
        date_format(bmcgpm.create_time, '%Y-%m-%d %H:%i:%s') as createTime,
        bmcgpm.year_month as yearMonth,
        bmcgpm.product_sort_code as productSortCode,
        bmcgpm.product_sort_name as productSortName,
        bmcgpm.price_channel_code as orderCode,
        bmcgpm.price_channel_name as orderOriginal,
        bmcgpm.store_type_code as storeTypeCode,
        bmcgpm.store_type as storeType,
        bmcgpm.data_type_code as dataTypeCode,
        bmcgpm.data_type as dataType,
        bmcgpm.category_code as categoryCode,
        bmcgpm.category_name as categoryName,
        sum(bmcgpm.total_stock_cost) as salesCost,
        sum(bmcgpm.total_channel_amount_daily) as channelAmount,
        sum(bmcgpm.total_channel_maori) as channelMaori,
        (sum(bmcgpm.total_channel_amount_daily)-sum(bmcgpm.total_stock_cost))/sum(bmcgpm.total_channel_amount_daily) as channelMaoriRate,
        sum(bmcgpm.last_month_total_channel_maori)/sum(bmcgpm.total_last_month_channel_amount_daily) as channelLastMaoriRate,
        sum(bmcgpm.last_year_total_channel_maori)/sum(bmcgpm.total_last_year_channel_amount_daily) as lastYearChannelMaoriRate,
        (sum(bmcgpm.total_channel_amount_daily)/sum(bmcgpm.total_last_year_channel_amount_daily))-1 as channelComparedSame,
        (sum(bmcgpm.total_channel_amount_daily)/sum(bmcgpm.total_last_month_channel_amount_daily))-1 as channelSequential,
        sum(bmcgpm.total_distribution_amount_daily) as distributionAmount,
        sum(bmcgpm.total_distribution_amount) as distributionMaori,
        sum(bmcgpm.total_distribution_amount)/sum(bmcgpm.total_distribution_amount_daily) as distributionMaoriRate,
        (sum(bmcgpm.total_last_month_distribution_amount_daily)-sum(bmcgpm.total_last_month_channel_amount_daily))/sum(bmcgpm.total_last_month_distribution_amount_daily) as distributionLastMaoriRate,
        (sum(bmcgpm.total_last_year_distribution_amount_daily)-sum(bmcgpm.total_last_year_channel_amount_daily))/sum(bmcgpm.total_last_year_distribution_amount_daily) as lastYearDistributionMaoriRate,
        (sum(bmcgpm.total_distribution_amount_daily)/sum(bmcgpm.total_last_year_distribution_amount_daily))-1 as distributionComparedSame,
        (sum(bmcgpm.total_distribution_amount_daily)/sum(bmcgpm.total_last_month_distribution_amount_daily))-1 as distributionSequential
        from (select * from bi_month_cumulative_brand_sales bmcgpm where 1=1
        <!--<if test="beginCreateTime!=null and beginCreateTime!=''">
            and bmcgpm.year_month between #{beginCreateTime}
        </if>
        <if test="createTime!=null and createTime!=''">
            and #{createTime}
        </if>-->
        <if test="createTime!=null and createTime!=''">
            and bmcgpm.year_month = #{createTime}
        </if>
        order by id desc limit 10000) as bmcgpm
        <include refid="select_month_cumulative_gross_profit_margin"/>
        and product_sort_code is not null and price_channel_code is not null and store_type_code is not null and data_type_code is not null and category_code is not null
        group by product_sort_code,price_channel_code,store_type_code,data_type_code,category_code
    </select>
    <select id="selectMonthCumulativeMargin" resultType="com.aiqin.bms.scmp.api.bireport.domain.response.MonthCumulativeMarginRespVo">
        select
          supplier_content as budgetProduct,
          supplier_dictionary_name as budgetProductName,
          supplier_dictionary_value as statMonth
        from supplier_dictionary_info
		where supplier_dictionary_name like concat('%', #{productSortName}, '%')
    </select>
</mapper>
